# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input FollowCreateManyFollowerInput {
  createdAt: DateTime
  followingId: Int!
  id: Int
}

input FollowCreateManyFollowerInputEnvelope {
  data: [FollowCreateManyFollowerInput!]!
  skipDuplicates: Boolean
}

input FollowCreateManyFollowingInput {
  createdAt: DateTime
  followerId: Int!
  id: Int
}

input FollowCreateManyFollowingInputEnvelope {
  data: [FollowCreateManyFollowingInput!]!
  skipDuplicates: Boolean
}

input FollowCreateNestedManyWithoutFollowerInput {
  connect: [FollowWhereUniqueInput!]
  connectOrCreate: [FollowCreateOrConnectWithoutFollowerInput!]
  create: [FollowCreateWithoutFollowerInput!]
  createMany: FollowCreateManyFollowerInputEnvelope
}

input FollowCreateNestedManyWithoutFollowingInput {
  connect: [FollowWhereUniqueInput!]
  connectOrCreate: [FollowCreateOrConnectWithoutFollowingInput!]
  create: [FollowCreateWithoutFollowingInput!]
  createMany: FollowCreateManyFollowingInputEnvelope
}

input FollowCreateOrConnectWithoutFollowerInput {
  create: FollowCreateWithoutFollowerInput!
  where: FollowWhereUniqueInput!
}

input FollowCreateOrConnectWithoutFollowingInput {
  create: FollowCreateWithoutFollowingInput!
  where: FollowWhereUniqueInput!
}

input FollowCreateWithoutFollowerInput {
  createdAt: DateTime
  following: UserCreateNestedOneWithoutFollowingInput!
}

input FollowCreateWithoutFollowingInput {
  createdAt: DateTime
  follower: UserCreateNestedOneWithoutFollowersInput!
}

input FollowFollowerIdFollowingIdCompoundUniqueInput {
  followerId: Int!
  followingId: Int!
}

input FollowListRelationFilter {
  every: FollowWhereInput
  none: FollowWhereInput
  some: FollowWhereInput
}

input FollowOrderByRelationAggregateInput {
  _count: SortOrder
}

type FollowUser {
  createdAt: DateTime!
  followerId: Int!
  followingId: Int!
  id: ID!
}

input FollowWhereInput {
  AND: [FollowWhereInput!]
  NOT: [FollowWhereInput!]
  OR: [FollowWhereInput!]
  createdAt: DateTimeFilter
  follower: UserRelationFilter
  followerId: IntFilter
  following: UserRelationFilter
  followingId: IntFilter
  id: IntFilter
}

input FollowWhereUniqueInput {
  AND: [FollowWhereInput!]
  NOT: [FollowWhereInput!]
  OR: [FollowWhereInput!]
  createdAt: DateTimeFilter
  follower: UserRelationFilter
  followerId: IntFilter
  followerId_followingId: FollowFollowerIdFollowingIdCompoundUniqueInput
  following: UserRelationFilter
  followingId: IntFilter
  id: Int
}

type Followers {
  createdAt: DateTime!
  follower: User!
  followerId: Int!
  following: User!
  followingId: Int!
  id: ID!
}

type Hashtag {
  _count: HashtagCount!
  createdAt: DateTime!
  id: ID!
  posts: [Post!]
  tag: String!
  updatedAt: DateTime!
}

type HashtagCount {
  postHashtags: Int!
}

input HashtagCreateNestedOneWithoutPostHashtagsInput {
  connect: HashtagWhereUniqueInput
  connectOrCreate: HashtagCreateOrConnectWithoutPostHashtagsInput
  create: HashtagCreateWithoutPostHashtagsInput
}

input HashtagCreateOrConnectWithoutPostHashtagsInput {
  create: HashtagCreateWithoutPostHashtagsInput!
  where: HashtagWhereUniqueInput!
}

input HashtagCreateWithoutPostHashtagsInput {
  createdAt: DateTime
  tag: String!
  updatedAt: DateTime
}

input HashtagOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  postHashtags: PostHashtagOrderByRelationAggregateInput
  tag: SortOrder
  updatedAt: SortOrder
}

input HashtagRelationFilter {
  is: HashtagWhereInput
  isNot: HashtagWhereInput
}

enum HashtagScalarFieldEnum {
  createdAt
  id
  tag
  updatedAt
}

input HashtagWhereInput {
  AND: [HashtagWhereInput!]
  NOT: [HashtagWhereInput!]
  OR: [HashtagWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  postHashtags: PostHashtagListRelationFilter
  tag: StringFilter
  updatedAt: DateTimeFilter
}

input HashtagWhereUniqueInput {
  AND: [HashtagWhereInput!]
  NOT: [HashtagWhereInput!]
  OR: [HashtagWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  postHashtags: PostHashtagListRelationFilter
  tag: String
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type LogoutResponse {
  loggedOut: Boolean!
}

type MediaFile {
  createdAt: DateTime!
  id: ID!
  key: String!
  post: Post!
  postId: Int!
  updatedAt: DateTime!
  url: String!
}

input MediaFileCreateManyPostInput {
  createdAt: DateTime
  id: Int
  key: String!
  updatedAt: DateTime
  url: String!
}

input MediaFileCreateManyPostInputEnvelope {
  data: [MediaFileCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input MediaFileCreateNestedManyWithoutPostInput {
  connect: [MediaFileWhereUniqueInput!]
  connectOrCreate: [MediaFileCreateOrConnectWithoutPostInput!]
  create: [MediaFileCreateWithoutPostInput!]
  createMany: MediaFileCreateManyPostInputEnvelope
}

input MediaFileCreateOrConnectWithoutPostInput {
  create: MediaFileCreateWithoutPostInput!
  where: MediaFileWhereUniqueInput!
}

input MediaFileCreateWithoutPostInput {
  createdAt: DateTime
  key: String!
  updatedAt: DateTime
  url: String!
}

input MediaFileListRelationFilter {
  every: MediaFileWhereInput
  none: MediaFileWhereInput
  some: MediaFileWhereInput
}

input MediaFileOrderByRelationAggregateInput {
  _count: SortOrder
}

input MediaFileWhereInput {
  AND: [MediaFileWhereInput!]
  NOT: [MediaFileWhereInput!]
  OR: [MediaFileWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  key: StringFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input MediaFileWhereUniqueInput {
  AND: [MediaFileWhereInput!]
  NOT: [MediaFileWhereInput!]
  OR: [MediaFileWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  key: StringFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

type Mutation {
  createPost(createPostInput: PostCreateWithoutUserInput!): Post!
  followUser(targetUserIdInput: TargetUserIdInput!): FollowUser!
  getNewTokens: NewTokensResonse!
  logout(id: Int!): LogoutResponse!
  signin(signInInput: SignInInput!): SignResponse!
  signup(signupInput: UserCreateInput!): SignResponse!
  unfollowUser(targetUserIdInput: TargetUserIdInput!): FollowUser!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type NewTokensResonse {
  accessToken: String!
  refreshToken: String!
}

enum NullsOrder {
  first
  last
}

type Post {
  createdAt: DateTime
  hashtags: [Hashtag!]
  id: ID!
  isHideLikeAndCount: Boolean!
  isTurnOffComment: Boolean!
  mediaFiles: [MediaFile!]
  postHashtags: [PostHashtagEntity!]
  title: String
  updatedAt: DateTime
  user: User
  userId: Int
}

input PostCreateManyUserInput {
  createdAt: DateTime
  id: Int
  isHideLikeAndCount: Boolean
  isTurnOffComment: Boolean
  title: String
  updatedAt: DateTime
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
}

input PostCreateOrConnectWithoutUserInput {
  create: PostCreateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutUserInput {
  createdAt: DateTime
  isHideLikeAndCount: Boolean
  isTurnOffComment: Boolean
  mediaFiles: MediaFileCreateNestedManyWithoutPostInput
  postHashtags: PostHashtagCreateNestedManyWithoutPostInput
  title: String
  updatedAt: DateTime
}

type PostHashtag {
  _count: HashtagCount!
  createdAt: DateTime!
  id: ID!
  postHashtags: [PostHashtag!]
  tag: String!
  updatedAt: DateTime!
}

input PostHashtagCreateManyPostInput {
  createdAt: DateTime
  hashtagId: Int!
  id: Int
  updatedAt: DateTime
}

input PostHashtagCreateManyPostInputEnvelope {
  data: [PostHashtagCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input PostHashtagCreateNestedManyWithoutPostInput {
  connect: [PostHashtagWhereUniqueInput!]
  connectOrCreate: [PostHashtagCreateOrConnectWithoutPostInput!]
  create: [PostHashtagCreateWithoutPostInput!]
  createMany: PostHashtagCreateManyPostInputEnvelope
}

input PostHashtagCreateOrConnectWithoutPostInput {
  create: PostHashtagCreateWithoutPostInput!
  where: PostHashtagWhereUniqueInput!
}

input PostHashtagCreateWithoutPostInput {
  createdAt: DateTime
  hashtag: HashtagCreateNestedOneWithoutPostHashtagsInput!
  updatedAt: DateTime
}

type PostHashtagEntity {
  createdAt: DateTime!
  hashtag: Hashtag!
  hashtagId: Int!
  id: ID!
  postId: Int!
  updatedAt: DateTime!
}

input PostHashtagListRelationFilter {
  every: PostHashtagWhereInput
  none: PostHashtagWhereInput
  some: PostHashtagWhereInput
}

input PostHashtagOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostHashtagPostIdHashtagIdCompoundUniqueInput {
  hashtagId: Int!
  postId: Int!
}

input PostHashtagWhereInput {
  AND: [PostHashtagWhereInput!]
  NOT: [PostHashtagWhereInput!]
  OR: [PostHashtagWhereInput!]
  createdAt: DateTimeFilter
  hashtag: HashtagRelationFilter
  hashtagId: IntFilter
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input PostHashtagWhereUniqueInput {
  AND: [PostHashtagWhereInput!]
  NOT: [PostHashtagWhereInput!]
  OR: [PostHashtagWhereInput!]
  createdAt: DateTimeFilter
  hashtag: HashtagRelationFilter
  hashtagId: IntFilter
  id: Int
  post: PostRelationFilter
  postId: IntFilter
  postId_hashtagId: PostHashtagPostIdHashtagIdCompoundUniqueInput
  updatedAt: DateTimeFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  isHideLikeAndCount: SortOrder
  isTurnOffComment: SortOrder
  mediaFiles: MediaFileOrderByRelationAggregateInput
  postHashtags: PostHashtagOrderByRelationAggregateInput
  title: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  createdAt
  id
  isHideLikeAndCount
  isTurnOffComment
  title
  updatedAt
  userId
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  isHideLikeAndCount: BoolFilter
  isTurnOffComment: BoolFilter
  mediaFiles: MediaFileListRelationFilter
  postHashtags: PostHashtagListRelationFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  isHideLikeAndCount: BoolFilter
  isTurnOffComment: BoolFilter
  mediaFiles: MediaFileListRelationFilter
  postHashtags: PostHashtagListRelationFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type Query {
  checkUserFollowed(targetUserIdInput: TargetUserIdInput!): Boolean!
  countAllPost: Int!
  findAllPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findAllPostByUsername(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findOnePost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post!
  findOneUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User!
  getAllPostHashtag(cursor: HashtagWhereUniqueInput, distinct: [HashtagScalarFieldEnum!], orderBy: [HashtagOrderByWithRelationInput!], skip: Int, take: Int, where: HashtagWhereInput): [PostHashtag!]!
  searchHashtag(query: String!): [PostHashtag!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

input SignInInput {
  email: String!
  password: String!
}

type SignResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input TargetUserIdInput {
  id: Int!
}

type User {
  _count: UserCount!
  createdAt: DateTime!
  email: String!
  followers: [Followers!]
  following: [Followers!]
  id: Int!
  name: String!
  password: String!
  posts: [Post!]
  refreshToken: String
  role: Role!
  updatedAt: DateTime!
  username: String!
}

type UserCount {
  followers: Int!
  following: Int!
  posts: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  followers: FollowCreateNestedManyWithoutFollowerInput
  following: FollowCreateNestedManyWithoutFollowingInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  refreshToken: String
  role: Role
  updatedAt: DateTime
  username: String!
}

input UserCreateNestedOneWithoutFollowersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFollowersInput
  create: UserCreateWithoutFollowersInput
}

input UserCreateNestedOneWithoutFollowingInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFollowingInput
  create: UserCreateWithoutFollowingInput
}

input UserCreateOrConnectWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutFollowersInput {
  createdAt: DateTime
  email: String!
  following: FollowCreateNestedManyWithoutFollowingInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  refreshToken: String
  role: Role
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutFollowingInput {
  createdAt: DateTime
  email: String!
  followers: FollowCreateNestedManyWithoutFollowerInput
  name: String!
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
  refreshToken: String
  role: Role
  updatedAt: DateTime
  username: String!
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  followers: FollowOrderByRelationAggregateInput
  following: FollowOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  refreshToken: SortOrderInput
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  refreshToken
  role
  updatedAt
  username
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  followers: FollowListRelationFilter
  following: FollowListRelationFilter
  id: IntFilter
  name: StringFilter
  password: StringFilter
  posts: PostListRelationFilter
  refreshToken: StringNullableFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: String
  followers: FollowListRelationFilter
  following: FollowListRelationFilter
  id: Int
  name: StringFilter
  password: StringFilter
  posts: PostListRelationFilter
  refreshToken: StringNullableFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  username: String
}