// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../@generated"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  /// @Validator.MinLength(5)
  username     String   @unique
  /// @Validator.MinLength(3)
  name         String
  /// @Validator.MinLength(6)
  password     String
  refreshToken String?
  role         Role     @default(USER)
  posts        Post[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  followers Follow[] @relation("FollowerRelation")
  following Follow[] @relation("FollowingRelation")
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  Int
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

enum Role {
  USER
  ADMIN
}

model Post {
  id                 Int           @id @default(autoincrement())
  title              String?
  mediaFiles         MediaFile[]
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             Int
  isHideLikeAndCount Boolean       @default(false)
  isTurnOffComment   Boolean       @default(false)
  postHashtags       PostHashtag[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
}

model MediaFile {
  id        Int      @id @default(autoincrement())
  key       String
  url       String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PostHashtag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  hashtagId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([postId, hashtagId])
}

model Hashtag {
  id           Int           @id @default(autoincrement())
  /// @Validator.MinLength(3)
  tag          String        @unique
  postHashtags PostHashtag[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}
